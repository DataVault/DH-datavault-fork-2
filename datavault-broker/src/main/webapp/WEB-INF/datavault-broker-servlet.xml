<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/rabbit
        http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">

    <context:component-scan base-package="org.datavault.broker.controllers"/>

    <mvc:annotation-driven />

    <!-- Configure to plugin JSON as request and response in method handler -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="jsonMessageConverter"/>
            </list>
        </property>
    </bean>

    <!-- Configure bean to convert JSON to POJO and vice versa -->
    <bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
    </bean>

    <!--
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    -->



    <!--
    View resolvers can also be configured with ResourceBundles or XML files. If you need
    different view resolving based on Locale, you have to use the resource bundle resolver.
    -->
    <!--
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="cache" value="true"/>
        <property name="prefix" value=""/>
        <property name="suffix" value=".ftl"/>
    </bean>
    -->

    <bean id="filesController" class="org.datavault.broker.controllers.FilesController">
        <property name="macFilesService" ref="macFilesService" />
    </bean>
    
    <bean id="vaultsController" class="org.datavault.broker.controllers.VaultsController">
        <property name="vaultsService" ref="vaultsService" />
        <property name="depositsService" ref="depositsService" />
        <property name="metadataService" ref="metadataService" />
        <property name="macFilesService" ref="macFilesService" />
        <property name="sender" ref="sender" />
    </bean>

    <!-- todo : should the service beans be put into their own config file? -->

    <bean id="macFilesService" class="org.datavault.broker.services.MacFilesService">
        <property name="activeDir" value="${activeDir}"/>
    </bean>
    
    <bean id="vaultsService" class="org.datavault.broker.services.VaultsService">
        <property name="vaultDAO" ref="vaultDAO" />
    </bean>
    
    <bean id="depositsService" class="org.datavault.broker.services.DepositsService">
        <property name="depositDAO" ref="depositDAO" />
    </bean>
    
    <bean id="metadataService" class="org.datavault.broker.services.MetadataService">
        <property name="metaDir" value="${metaDir}"/>
    </bean>

    <!-- RabbitMQ -->
    
    <bean id="connectionFactory"
        class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
        <constructor-arg value="${queueServer}" />
        <property name="username" value="${queueUser}" />
        <property name="password" value="${queuePassword}" />
    </bean>
    
    <!--
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory" />
    -->
    
    <rabbit:admin connection-factory="connectionFactory" />
    
    <rabbit:queue id="eventQueue" name="${eventQueueName}" />
    
    <!--
    <rabbit:direct-exchange id="exchange" name="">
        <rabbit:bindings>
            <rabbit:binding queue="eventQueue" key="${eventQueueName}"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>
    -->
    
    <rabbit:listener-container connection-factory="connectionFactory" >
        <rabbit:listener ref="listener" method="listen" queue-names="eventQueue" />
    </rabbit:listener-container>

    <bean id="listener" class="org.datavault.queue.EventListener" />

    <bean id="sender" class="org.datavault.queue.Sender">
        <property name="queueServer" value="${queueServer}"/>
        <property name="queueName" value="${queueName}"/>
        <property name="queueUser" value="${queueUser}"/>
        <property name="queuePassword" value="${queuePassword}"/>
    </bean>

    <!-- Hibernate -->
    
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://${dbURL}"/>
        <property name="username" value="${dbUsername}" />
        <property name="password" value="${dbPassword}"/>
    </bean>
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" >
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>org.datavault.common.model</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
            </props>
        </property>
    </bean>
 
    <bean id="transactionManager"  class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
 
    <bean id="persistenceExceptionTranslationPostProcessor" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <!-- Data Access Objects -->
    
    <bean id="vaultDAO" class="org.datavault.common.model.dao.VaultDAOImpl">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="depositDAO" class="org.datavault.common.model.dao.DepositDAOImpl">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
</beans>