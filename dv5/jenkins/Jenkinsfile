def GH_TAG="n/a"
def hello(String message) {
  return "hello ${message}"
}
pipeline {
    parameters {
      booleanParam(name: ENABLE_UNIT_TESTS, defaultValue: true)
      booleanParam(name: ENABLE_INTEGRATION_TESTS, defaultValue: true)
      string(name: 'TAG', defaultValue: '1.0.0', description: 'A tag that will be added to github to link the code to this build.')
      credentials( credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', defaultValue: 'dv-fork-cicd-tag-token', description: 'Credentials for the GitHub repository', name: 'GH_TAG_CREDENTIALS_ID')
    }
    agent {
      dockerfile {
        dir 'dv5/jenkins'
        filename 'Dockerfile.jenkins'
                additionalBuildArgs '--build-arg JENKINS_UID=$(id -u) --build-arg JENKINS_GID=$(id -g) --build-arg DOCKER_GID=$(getent group docker | cut -d: -f3)'
        args  '--group-add=docker -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/jenkins/.m2:/home/jenkins/.m2 -e JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8'
      }
    }
    stages {
        stage('Check Tag has not been used already: before anything else') {
          //the GH_TAG variable here is used in the stage ''
          steps {
            script {
              def hi = hello("world");
              echo "HI IS[${hi}]"
              GH_TAG = TAG.replaceAll(" ","_")
              def TAG_EXISTS = sh (script:"git show refs/tags/${GH_TAG} --", returnStatus:true)
              if (TAG_EXISTS == 0) {
                throw new Exception("The Tag [${GH_TAG}] has been used already.")
              }
            }
          }
        }
        stage('Test Docker Socket') {
           steps {
              echo "Unit Tests.. [$ENABLE_UNIT_TESTS]"
              echo "Integration Tests.. [$ENABLE_INTEGRATION_TESTS]"
              echo 'Testing Docker Socket'
              sh 'curl --silent -XGET --unix-socket /var/run/docker.sock http://localhost/info | jq'
           }
        }
        stage('Compile') {
            steps {
                echo 'Compiling..'
                sh './mvnw clean compile'
            }
        }
        stage('Unit Tests') {
            steps {
                echo "Unit Tests.. [${env.ENABLE_UNIT_TESTS}"
                script {
                  if (env.ENABLE_UNIT_TESTS == 'true') {
                    sh './mvnw test'
                  } else {
                    echo "Unit Tests Disabled";
                  }
                }
            }
        }
        stage('Integration Tests') {
            steps {
                echo "Integration Tests.. [${env.ENABLE_INTEGRATION_TESTS}"
                script {
                  if (env.ENABLE_INTEGRATION_TESTS == 'true') {
                    sh './mvnw integration-test -Dskip.unit.tests -Dmaven.main.skip'
                  } else {
                    echo "Unit Tests Disabled";
                  }
                }
            }
        }
        stage('Install') {
            steps {
                echo 'installing locally'
                sh './mvnw install -Dskip.unit.tests -Dskip.integration.tests -Dmaven.main.skip'
            }
        }
        stage('Tag Build') {
          steps {
            script {
              //The GH_TAG variable is set in an earlier Stage
              sh "git tag -a '$GH_TAG' -m '${TAG}' ${GIT_COMMIT}"
              echo "TAG IS [${GH_TAG}]@${GIT_COMMIT}"
              //We need git credentials to push the tag
              withCredentials([gitUsernamePassword(credentialsId: GH_TAG_CREDENTIALS_ID)]) {
                sh "git config --global user.name '$GIT_USERNAME'"
                sh "git push origin refs/tags/${GH_TAG}"
              }
            }
          }
        }
    }
    post {
        always {
          junit allowEmptyResults:true, testResults: '**/surefire-reports/*.xml'
          publishCoverage adapters: [jacoco(mergeToOneReport: true, path: '**/jacoco.xml')]
        }
        success {
            echo "BUILD SUCCESS : Recording Artifacts.."
            sh 'mkdir -p artifacts'
            sh 'mv datavault-webapp/target/datavault-webapp.jar artifacts/datavault-webapp.jar'
            sh 'mv datavault-worker/target/datavault-worker.jar artifacts/datavault-worker.jar'
            sh 'mv datavault-broker/target/datavault-broker.jar artifacts/datavault-broker.jar'
            archiveArtifacts artifacts: 'artifacts/datavault-webapp.jar, artifacts/datavault-worker.jar, artifacts/datavault-broker.jar', fingerprint: true
        }
    }
}
